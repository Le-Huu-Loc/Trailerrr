{"version":3,"file":"static/js/880.361fc6cc.chunk.js","mappings":"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","sources":["API/apiConfig.js","API/axiosClient.js","API/tmdbApi.js","Pages/Catalog/Genres/index.jsx","Components/Button/index.jsx","Components/Input/index.jsx","Components/MovieCard/index.jsx","Components/PageGrid/index.jsx","Components/PageHeader/index.jsx","Pages/Catalog/index.jsx","Components/MovieList/index.jsx","Components/Modal/index.jsx","Pages/Detail/Cast/index.jsx","Pages/Detail/VideoList/index.jsx","Pages/Detail/index.jsx","Components/HeroSlide/index.jsx","Pages/Favourite/index.jsx","Pages/Home/index.jsx","Config/Routes.jsx"],"sourcesContent":["const apiConfig = {\r\n    baseUrl: 'https://api.themoviedb.org/3/',   //Url basic\r\n    apiKey: '6f6b0bf90406f6b480de37b78dfd008a', //key api\r\n    originalImage: (imgPath) => `https://image.tmdb.org/t/p/original/${imgPath}`, //image nguyen ban\r\n    w500Image: (imgPath) => `https://image.tmdb.org/t/p/w500/${imgPath}` //img w500\r\n}\r\nexport default apiConfig;","import axios from 'axios'\r\nimport querystring from 'query-string'\r\n\r\nimport apiConfig from './apiConfig'\r\n\r\n\r\nconst axiosClient = axios.create({\r\n    baseURL: apiConfig.baseUrl,\r\n    headers: {\r\n        'Content-type': 'application.json'\r\n    },\r\n    paramsSerializer: params => querystring.stringify({...params, api_key: apiConfig.apiKey})\r\n})\r\n\r\naxiosClient.interceptors.request.use(async (config) => config)\r\n\r\naxiosClient.interceptors.response.use(response =>{\r\n    if(response && response.data){\r\n        return response.data\r\n    }\r\n    return response\r\n},(error)=>{\r\n    throw error\r\n})\r\n\r\nexport default axiosClient;","import axiosClient from './axiosClient'\r\n\r\nexport const movieType = {\r\n    upcoming: 'upcoming',\r\n    popular: 'popular',\r\n    top_rated: 'top_rated'\r\n}\r\nexport const tvType = {\r\n    on_the_air: 'on_the_air',\r\n    popular: 'popular',\r\n    top_rated: 'top_rated'\r\n}\r\n\r\nexport const category = {\r\n    movie: 'movie',\r\n    movie_top_rated: 'movie',\r\n    tv: 'tv',\r\n    tv_top_rated: 'top_rated'\r\n}\r\n\r\nconst tmdbApi = {\r\n    getMovieList: (type, params) => {\r\n        const url = 'movie/' + movieType[type]\r\n        return axiosClient.get(url, params)\r\n    },\r\n\r\n    getTvList: (type, params) => {\r\n        const url = 'tv/' + tvType[type]\r\n        return axiosClient.get(url, params)\r\n    },\r\n\r\n    getVideos: (cate, id) => {\r\n        const url = category[cate] + '/' + id + '/videos'\r\n        return axiosClient.get(url, { params: {} })\r\n    },\r\n\r\n    getCredits: (cate, id) => {\r\n        const url = category[cate] + '/' + id + '/credits'\r\n        return axiosClient.get(url, { params: {} })\r\n    },\r\n\r\n    details: (cate, id, params) => {\r\n        const url = category[cate] + '/' + id\r\n        return axiosClient.get(url, { params: {} })\r\n    },\r\n\r\n    search: (cate, params) => {\r\n        const url = 'search/' + category[cate]\r\n        return axiosClient.get(url, params)\r\n    },\r\n\r\n    genre: (cate, params) => {\r\n        const url = 'genre/' + category[cate] + '/list';\r\n        return axiosClient.get(url, params)\r\n    },\r\n\r\n    getByGenre: (cate, params) => {\r\n        const url = 'discover/' + category[cate];\r\n        return axiosClient.get(url, params)\r\n    },\r\n\r\n    credits: (cate, id) => {\r\n        const url = category[cate] + '/' + id + '/credits';\r\n        return axiosClient.get(url, { params: {} })\r\n    },\r\n\r\n    similar: (cate, id, params) => {\r\n        const url = category[cate] + '/' + id + '/similar'\r\n        return axiosClient.get(url, { params: {} })\r\n    }\r\n}\r\n\r\nexport default tmdbApi;","import React, { useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\nimport tmdbApi, { category } from '../../../API/tmdbApi'\r\n\r\nconst Genres = props => {\r\n\r\n    let navigate = useNavigate()\r\n\r\n    const { onSetGenre, listGenre } = props\r\n\r\n    let cate = props.category\r\n\r\n    if (cate === 'topmv' || cate === 'upcomingmv' || cate === 'movie') {\r\n        cate = 'movie'\r\n    }\r\n    else cate = 'tv'\r\n\r\n    const [genres, setGenres] = useState([])\r\n\r\n    useEffect(() => {\r\n        const getGenre = async () => {\r\n            let reponse = null\r\n            const params = {}\r\n            reponse = await tmdbApi.genre(cate, { params })\r\n            setGenres(reponse.genres)\r\n        }\r\n\r\n        getGenre()\r\n    }, [cate])\r\n\r\n    const searchByGenres = (id) => {\r\n        if (onSetGenre) {\r\n            onSetGenre(id)\r\n            navigate(`/${category[cate]}/genre`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"genres\">\r\n            {\r\n                genres && genres.map((g, i) => (\r\n                    <span key={i} className={`genres__item ${listGenre.includes(g.id) ? 'active_genre' : ''}`} onClick={() => searchByGenres(g.id)}>{g.name}</span>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nGenres.propTypes = {\r\n    category: PropTypes.string.isRequired,\r\n    onSetGenre: PropTypes.func,\r\n    listGenre: PropTypes.array\r\n}\r\nGenres.defaultProps = {\r\n    onSetGenre: null,\r\n    listGenre: [],\r\n}\r\n\r\nexport default Genres","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Button.scss'\r\n\r\nconst Button = props => {\r\n    return (\r\n        <button className={`btn ${props.className}`} onClick={props.onClick ? () => props.onClick() : null}>{props.children}</button>\r\n    )\r\n}\r\n\r\nexport const OutlineButton = props => {\r\n    return (\r\n        <button className={`btn btn-outline ${props.className}`} onClick={props.onClick ? () => props.onClick() : null}>{props.children}</button>\r\n    )\r\n}\r\n\r\nButton.propTypes = {\r\n    onClick: PropTypes.func,\r\n    type: PropTypes.string,\r\n}\r\n\r\nexport default Button\r\n\r\n","import React from 'react'\r\nimport './Input.scss'\r\n\r\nconst Input = props => {\r\n    return (\r\n        <input\r\n            type={props.type}\r\n            placeholder={props.placeholder}\r\n            value={props.value}\r\n            onChange={props.onChange ? (e) => props.onChange(e) : null}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport default Input","import React from 'react'\r\nimport './MovieCard.scss'\r\n\r\nimport { Link } from 'react-router-dom'\r\nimport { category } from '../../API/tmdbApi'\r\nimport apiConfig from '../../API/apiConfig'\r\nimport Button from '../Button'\r\n\r\nconst MovieCard = props => {\r\n\r\n    const item = props.item\r\n\r\n    const categoryy = category[props.category] || item.category\r\n\r\n    const link = '/' + categoryy + '/' + item.id\r\n\r\n    const bg = apiConfig.w500Image(item.poster_path || item.backdrop_path)\r\n\r\n    return (\r\n        <Link to={link}>\r\n            <div className=\"movie-card\" style={{ backgroundImage: `url(${bg})` }}>\r\n                <Button>\r\n                    <i className=\"bx bx-play\">Play</i>\r\n                </Button>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\n\r\nexport default MovieCard\r\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport tmdbApi, { category, movieType, tvType } from '../../API/tmdbApi'\r\nimport Genres from '../../Pages/Catalog/Genres'\r\nimport { OutlineButton } from '../Button'\r\nimport Input from '../Input'\r\nimport MovieCard from '../MovieCard'\r\nimport './PageGrid.scss'\r\n\r\nconst PageGrid = props => {\r\n\r\n    const likes = useSelector(state => state.likes)\r\n\r\n    const [items, setItems] = useState([])\r\n    const [page, setPage] = useState(1)\r\n    const [totalPage, setTotalPage] = useState(0)\r\n\r\n    const { keywork } = useParams()\r\n    const [genres, setGenres] = useState([])\r\n\r\n    useEffect(() => {\r\n        const getList = async () => {\r\n            let reponse = null\r\n\r\n            if (keywork === undefined && genres.length === 0) {\r\n                const params = {}\r\n                switch (props.category) {\r\n                    case 'movie':\r\n                        reponse = await tmdbApi.getMovieList(movieType.popular, { params })\r\n                        break;\r\n                    case 'topmv':\r\n                        reponse = await tmdbApi.getMovieList(movieType.top_rated, { params })\r\n                        break;\r\n                    case 'upcomingmv':\r\n                        reponse = await tmdbApi.getMovieList(movieType.upcoming, { params })\r\n                        break;\r\n                    case 'toptv':\r\n                        reponse = await tmdbApi.getTvList(tvType.top_rated, { params })\r\n                        break;\r\n                    case 'on_the_air':\r\n                        reponse = await tmdbApi.getTvList(tvType.on_the_air, { params })\r\n                        break;\r\n                    case 'favourite':\r\n                        reponse = likes\r\n                        break;\r\n\r\n                    default:\r\n                        reponse = await tmdbApi.getTvList(tvType.popular, { params })\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (keywork) {\r\n                const params = {\r\n                    query: keywork\r\n                }\r\n                reponse = await tmdbApi.search(props.category, { params })\r\n            }\r\n\r\n            if (genres.length > 0) {\r\n                const params = {\r\n                    with_genres: genres.join(',')\r\n                }\r\n                reponse = await tmdbApi.getByGenre(props.category, { params })\r\n            }\r\n            console.log(reponse)\r\n\r\n            if (props.category === 'favourite') {\r\n                setItems(reponse)\r\n                setTotalPage(reponse)\r\n            }\r\n            else {\r\n                setItems(reponse.results)\r\n                setTotalPage(reponse.total_pages)\r\n            }\r\n        }\r\n\r\n        getList()\r\n    }, [props.category, keywork, genres, likes])\r\n\r\n    const loadMore = async () => {\r\n        let reponse = null\r\n\r\n        if (keywork === undefined) {\r\n            const params = {\r\n                page: page + 1\r\n            }\r\n            switch (props.category) {\r\n                case 'movie':\r\n                    reponse = await tmdbApi.getMovieList(movieType.popular, { params })\r\n                    break;\r\n                case 'topmv':\r\n                    reponse = await tmdbApi.getMovieList(movieType.top_rated, { params })\r\n                    break;\r\n                case 'upcomingmv':\r\n                    reponse = await tmdbApi.getMovieList(movieType.upcoming, { params })\r\n                    break;\r\n                case 'toptv':\r\n                    reponse = await tmdbApi.getTvList(tvType.top_rated, { params })\r\n                    break;\r\n                case 'on_the_air':\r\n                    reponse = await tmdbApi.getTvList(tvType.on_the_air, { params })\r\n                    break;\r\n\r\n                default:\r\n                    reponse = await tmdbApi.getTvList(tvType.popular, { params })\r\n                    break;\r\n            }\r\n        }\r\n        if (keywork) {\r\n            const params = {\r\n                page: page + 1,\r\n                query: keywork\r\n            }\r\n            reponse = await tmdbApi.search(props.category, { params })\r\n        }\r\n        if (genres.length > 0) {\r\n            const params = {\r\n                page: page + 1,\r\n                with_genres: genres.join(',')\r\n            }\r\n            reponse = await tmdbApi.getByGenre(props.category, { params })\r\n        }\r\n        setItems([...items, ...reponse.results])\r\n        setPage(page + 1)\r\n\r\n    }\r\n\r\n    const searchByGenres = id => {\r\n        const index = genres.findIndex(g => g === id)\r\n\r\n        if (index < 0) {\r\n            const newListGenres = [...genres]\r\n            newListGenres.push(id)\r\n            setGenres(newListGenres)\r\n        }\r\n        else {\r\n            const newListGenres = [...genres]\r\n            newListGenres.splice(index, 1)\r\n            setGenres(newListGenres)\r\n        }\r\n    }\r\n\r\n    const onClickKeywork = () => {\r\n        setGenres([])\r\n        document.querySelector('.search-keywork').classList.remove('active_search')\r\n        document.querySelector('.search-genre').classList.add('active_search')\r\n    }\r\n    const onClickGenre = () => {\r\n        document.querySelector('.search-genre').classList.remove('active_search')\r\n        document.querySelector('.search-keywork').classList.add('active_search')\r\n    }\r\n\r\n    const showGenre = (e) => {\r\n        e.target.nextSibling.classList.toggle('genre-mobile')\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {items.length > 0 ? (\r\n                <>\r\n                    {\r\n                        props.category === 'favourite' ? (null) : (\r\n                            <fieldset className='search'>\r\n                                <legend>Filters</legend>\r\n                                <div className=\"search-keywork\" onClick={onClickKeywork}>\r\n                                    <PageSearch category={props.category} keywork={keywork} />\r\n                                </div>\r\n                                or\r\n                                <div className=\"search-genre\" onClick={onClickGenre}>\r\n                                    <div className=\"title-show\" onClick={showGenre}>Show Genres</div>\r\n                                    <Genres category={props.category} onSetGenre={searchByGenres} listGenre={genres} />\r\n                                </div>\r\n                            </fieldset>\r\n                        )\r\n                    }\r\n\r\n                    <div className=\"movie-grid\">\r\n                        {\r\n                            items.map((item, index) => (\r\n                                <MovieCard category={props.category} item={item} key={index} />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    {\r\n                        page < totalPage ? (\r\n                            <div className=\"movie-grid__loadmore\">\r\n                                <OutlineButton className=\"small\" onClick={loadMore}>Load More</OutlineButton>\r\n                            </div>\r\n                        ) : null\r\n                    }\r\n                </>\r\n            ) : (\r\n                <div style={{ textAlign: \"center\", fontSize: \"25px\", fontWeight: \"600\" }}>No Items !</div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nconst PageSearch = props => {\r\n    let navigate = useNavigate()\r\n\r\n    const [keywork, setKeywork] = useState(props.keywork ? props.keywork : '')\r\n\r\n    const gotoSearch = useCallback(() => {\r\n        if (keywork.trim().length > 0) {\r\n            navigate(`/${category[props.category]}/search/${keywork}`)\r\n        }\r\n    }, [keywork, props.category, navigate])\r\n\r\n    useEffect(() => {\r\n        const enterEvent = (e) => {\r\n            e.preventDefault()\r\n            if (e.keyCode === 13) {\r\n                gotoSearch()\r\n            }\r\n        }\r\n        document.addEventListener('keyup', enterEvent)\r\n\r\n        return () => {\r\n            document.removeEventListener('keyup', enterEvent)\r\n        }\r\n    }, [keywork, gotoSearch])\r\n\r\n    return (\r\n        <div className=\"movie-search\">\r\n            <Input\r\n                type=\"text\"\r\n                placeholder=\"Enter keywork\"\r\n                value={keywork}\r\n                onChange={(e) => setKeywork(e.target.value)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PageGrid","import React from 'react'\r\nimport './PageHeader.scss'\r\n\r\nconst PageHeader = props => {\r\n    return (\r\n        <div>\r\n            <div className=\"page-header\">\r\n                <h2>{props.children}</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PageHeader","import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport PageGrid from '../../Components/PageGrid'\r\nimport PageHeader from '../../Components/PageHeader'\r\n\r\nconst Catalog = () => {\r\n\r\n    const { category } = useParams()\r\n\r\n    let stringHeader = ''\r\n\r\n    switch (category) {\r\n        case 'movie':\r\n            stringHeader = 'Movies'\r\n            break;\r\n        case 'topmv':\r\n            stringHeader = 'Top Rated Movies'\r\n            break;\r\n        case 'upcomingmv':\r\n            stringHeader = 'Upcoming Movies'\r\n            break;\r\n        case 'toptv':\r\n            stringHeader = 'Top Rated TVs'\r\n            break;\r\n        case 'on_the_air':\r\n            stringHeader = 'On The Air'\r\n            break;\r\n        case 'favourite':\r\n            stringHeader = 'Favourite'\r\n            break;\r\n\r\n        default:\r\n            stringHeader = 'TVs'\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PageHeader>\r\n                {stringHeader}\r\n            </PageHeader>\r\n            <div className=\"container\">\r\n                <div className=\"section mb-3\">\r\n                    <PageGrid category={category} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Catalog","import React, { useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport tmdbApi, { category } from '../../API/tmdbApi'\r\nimport MovieCard from '../MovieCard'\r\n\r\nimport './MovieList.scss'\r\n\r\nconst MovieList = props => {\r\n\r\n    const [item, setItem] = useState([])\r\n\r\n    useEffect(() => {\r\n        const getList = async () => {\r\n            let reponse = null\r\n            const params = {}\r\n            if (props.type !== 'similar') {\r\n                switch (props.category) {\r\n                    case category.movie:\r\n                        reponse = await tmdbApi.getMovieList(props.type, { params })\r\n                        break;\r\n\r\n                    default:\r\n                        reponse = await tmdbApi.getTvList(props.type, { params })\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                reponse = await tmdbApi.similar(props.category, props.id)\r\n            }\r\n            setItem(reponse.results)\r\n        }\r\n        getList()\r\n    }, [props.category, props.id, props.type])\r\n\r\n    return (\r\n        <div className=\"movie-list\">\r\n            <Swiper grabCursor={true} spaceBetween={10} slidesPerView={'auto'}>\r\n                {item.map((item, index) => (\r\n                    <SwiperSlide key={index}>\r\n                        <MovieCard item={item} category={props.category} />\r\n                    </SwiperSlide>\r\n                ))}\r\n            </Swiper>\r\n        </div>\r\n    )\r\n}\r\n\r\nMovieList.propTypes = {\r\n    category: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default MovieList\r\n\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Modal.scss';\r\n\r\nModal.propTypes = {\r\n    active: PropTypes.bool,\r\n    id: PropTypes.string,\r\n};\r\n\r\nfunction Modal(props) {\r\n\r\n    const [active, setActive] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setActive(props.active)\r\n    }, [props.active])\r\n\r\n    return (\r\n        <div id={props.id} className={`modal ${active ? 'active' : ''}`}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const ModalContent = props => {\r\n\r\n    ModalContent.propTypes = {\r\n        onClose: PropTypes.func\r\n    }\r\n\r\n    const contentRef = useRef(null)\r\n    const closeModal = () => {\r\n        contentRef.current.parentNode.classList.remove('active')\r\n        if (props.onClose) {\r\n            return props.onClose()\r\n        }\r\n    }\r\n    return (\r\n        <div ref={contentRef} className=\"modal__content\">\r\n            {props.children}\r\n            <div className=\"modal__content__close\" onClick={closeModal}>\r\n                <i className=\"bx bx-x\">X</i>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport apiConfig from '../../../API/apiConfig'\r\nimport tmdbApi from '../../../API/tmdbApi'\r\nimport './Cast.scss'\r\n\r\nconst Cast = (props) => {\r\n\r\n    const { category } = useParams()\r\n\r\n    const [casts, setCasts] = useState([])\r\n\r\n    useEffect(() => {\r\n        const getCasts = async () => {\r\n            const reponse = await tmdbApi.getCredits(category, props.id)\r\n            setCasts(reponse.cast.slice(0, 5))\r\n        }\r\n        getCasts()\r\n    }, [category, props.id])\r\n\r\n    return (\r\n        <div className=\"casts\">\r\n            {\r\n                casts.map((c, i) => (\r\n                    <div className=\"casts__item\" key={i}>\r\n                        <div className=\"casts__item__img\" style={{ backgroundImage: `url(${apiConfig.w500Image(c.profile_path)})` }}></div>\r\n                        <p className='casts__item__name'>{c.name}</p>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cast","import React, { useRef, useState, useEffect } from 'react'\r\nimport tmdbApi from '../../../API/tmdbApi'\r\nimport { useParams } from 'react-router-dom'\r\nimport './VideoList.scss'\r\n\r\nconst VideoList = props => {\r\n\r\n    const [videos, setVideos] = useState([])\r\n    const [video, setVideo] = useState([])\r\n    const [active, setActive] = useState(0)\r\n\r\n    const { category } = useParams()\r\n\r\n    useEffect(() => {\r\n        const getVideo = async () => {\r\n            const res = await tmdbApi.getVideos(category, props.id)\r\n            setVideos(res.results)\r\n            setVideo(res.results.slice(0, 1))\r\n        }\r\n        getVideo()\r\n\r\n    }, [category, props.id])\r\n\r\n\r\n    const Video = props => {\r\n        const item = props.item\r\n\r\n        const iframeRef = useRef(null)\r\n\r\n        useEffect(() => {\r\n            const height = iframeRef.current.offsetWidth * 9 / 16 + 'px'\r\n            iframeRef.current.setAttribute('height', height)\r\n        }, [])\r\n\r\n        return (\r\n            <div className=\"video-container\">\r\n                <div className=\"video-container__title\">\r\n                    <h2>{item.name}</h2>\r\n                </div>\r\n                <iframe src={`https://www.youtube.com/embed/${item.key}`} ref={iframeRef} width=\"100%\" title={item.name} allowFullScreen={true}></iframe>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    const countVideo = count => {\r\n        setVideo(videos.slice(count, count + 1))\r\n        setActive(count)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                videos.length > 0 ? (\r\n                    <div className=\"video-container\">\r\n                        {\r\n                            video.map((v, i) => (\r\n                                <Video key={i} item={v} />\r\n                            ))\r\n                        }\r\n                        {\r\n                            <div className=\"video-container__ep\">\r\n                                {\r\n                                    videos.map((v, i) => (\r\n                                        <span className={`ep-element ${active === i ? 'active-ep' : ''}`} onClick={() => countVideo(i)} key={i}>Trailer {i + 1}</span>\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                )\r\n                    :\r\n                    (\r\n                        <div style={{ width: '100%', height: '50vh', display: 'flex', border: '1px solid #ccc', alignItems: 'center', justifyContent: 'center' }}>\r\n                            <h1>Opps ! Not found -.-</h1>\r\n                        </div>\r\n                    )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default VideoList\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport ReactStar from 'react-rating-stars-component';\r\nimport { TiHeartOutline } from 'react-icons/ti'\r\n\r\nimport apiConfig from '../../API/apiConfig';\r\nimport tmdbApi from '../../API/tmdbApi';\r\n\r\nimport MovieList from '../../Components/MovieList';\r\nimport Button, { OutlineButton } from '../../Components/Button';\r\nimport Modal, { ModalContent } from '../../Components/Modal';\r\n\r\nimport Cast from './Cast';\r\nimport VideoList from './VideoList';\r\nimport './Detail.scss';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addLike, removeLike } from '../likeSlice'\r\n\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\ntoast.configure()\r\nconst Detail = () => {\r\n\r\n    const { category, id } = useParams()\r\n\r\n    const [item, setItem] = useState(null)\r\n\r\n    useEffect(() => {\r\n        const getDetail = async () => {\r\n            const reponse = await tmdbApi.details(category, id, { params: {} })\r\n            setItem(reponse)\r\n            window.scrollTo(0, 0)\r\n        }\r\n\r\n        getDetail()\r\n    }, [category, id])\r\n\r\n    const TrailerModal = props => {\r\n        const item = props.item\r\n\r\n        const iframRef = useRef(null)\r\n\r\n        const onClose = () => iframRef.current.setAttribute('src', '')\r\n\r\n        return (\r\n            <Modal active={false} id={`modal__${item.id}`}>\r\n                <ModalContent onClose={onClose}>\r\n                    <iframe ref={iframRef} width=\"100%\" height=\"400px\" title={item.name}></iframe>\r\n                </ModalContent>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    const setActiveModal = async (item) => {\r\n        const modal = document.querySelector(`#modal__${item.id}`)\r\n        const videos = await tmdbApi.getVideos(category, item.id)\r\n\r\n        if (videos.results.length > 0) {\r\n            const videoSrc = 'https://www.youtube.com/embed/' + videos.results[0].key\r\n            modal.querySelector('.modal__content > iframe').setAttribute('src', videoSrc)\r\n        }\r\n        else {\r\n            modal.querySelector('.modal__content').innerHTML = 'No trailer'\r\n        }\r\n        modal.classList.toggle('active')\r\n    }\r\n\r\n    const scrollVideo = () => {\r\n        const heightVid = document.querySelector('.video-container').clientHeight\r\n\r\n        window.scroll({\r\n            top: heightVid,\r\n            behavior: 'smooth'\r\n        })\r\n    }\r\n\r\n    const likes = useSelector(state => state.likes)\r\n\r\n    const dispatch = useDispatch()\r\n    const onLike = (item) => {\r\n        const items = {\r\n            ...item,\r\n            category: category\r\n        }\r\n\r\n        if (likes.find(x => x.id === item.id)) {\r\n            const action = removeLike(items)\r\n            dispatch(action)\r\n            toast.error(`Removed from favorites !`)\r\n        }\r\n        else {\r\n            const action = addLike(items)\r\n            dispatch(action)\r\n            toast.success(\"Added to favorites !\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                item && (\r\n                    <>\r\n                        <div className=\"banner\" style={{ backgroundImage: `url(${apiConfig.originalImage(item.backdrop_path || item.poster_path)})` }}></div>\r\n                        <div className=\"container movie-content mb-3\">\r\n                            <div className=\"movie-content__poster\">\r\n                                <div className=\"movie-content__poster__img\" style={{ backgroundImage: `url(${apiConfig.originalImage(item.poster_path || item.backdrop_path)})` }}></div>\r\n                            </div>\r\n                            <div className=\"movie-content__info\">\r\n                                <h1 className=\"title\">{item.title || item.name}</h1>\r\n                                <div className=\"rating\">\r\n                                    <ReactStar count={10} value={item.vote_average} edit={false} size={26} />\r\n                                    <span>({item.vote_average}/10)</span>\r\n                                    <TiHeartOutline size={25} className={`like ${likes.find(x => x.id === item.id) ? 'like-active' : ''}`} onClick={() => onLike(item)} />\r\n                                </div>\r\n                                <div className=\"btns\">\r\n                                    <Button className=\"btn-watch\" onClick={scrollVideo}>Watch Now</Button>\r\n                                    <OutlineButton onClick={() => setActiveModal(item)}>Watch Trailer</OutlineButton>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"container\">\r\n                            <div className=\"section mb-3\">\r\n                                <div className=\"video-detail\">\r\n                                    <VideoList id={item.id} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"section mb-3\">\r\n                                <div className=\"genres-detail\">\r\n                                    <div className=\"section__header\">\r\n                                        <h2>Genres</h2>\r\n                                    </div>\r\n                                    <div className=\"genres-detail__list\">\r\n                                        {item.genres && item.genres.map((item, index) => (\r\n                                            <span key={index} className=\"genres-detail__item\">{item.name}</span>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"overview-detail\">\r\n                                    <div className=\"section__header\">\r\n                                        <h2>Overview</h2>\r\n                                    </div>\r\n                                    <p>{item.overview}</p>\r\n                                </div>\r\n                                <div className=\"cast-detail\">\r\n                                    <div className=\"section__header\">\r\n                                        <h2>Cast</h2>\r\n                                    </div>\r\n                                    <Cast id={item.id} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"container\">\r\n                            <div className=\"section mb-3\">\r\n                                <div className=\"section__header mb-2\">\r\n                                    <h2>Similar</h2>\r\n                                </div>\r\n                                <MovieList category={category} type='similar' id={item.id} />\r\n                            </div>\r\n                        </div>\r\n\r\n                        {\r\n                            <TrailerModal item={item} />\r\n                        }\r\n                    </>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Detail\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport './HeroSlide.scss'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport tmdbApi, { movieType, category } from '../../API/tmdbApi'\r\nimport SwiperCore, { Autoplay } from 'swiper'\r\nimport apiConfig from '../../API/apiConfig'\r\nimport Button, { OutlineButton } from '../Button'\r\nimport Modal, { ModalContent } from '../Modal'\r\n\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport 'swiper/css';\r\n\r\nconst HeroSlide = () => {\r\n\r\n    SwiperCore.use([Autoplay])\r\n\r\n    const [movieItem, setMovieItem] = useState([])\r\n\r\n    useEffect(() => {\r\n        const getMovies = async () => {\r\n            const params = { page: 1 }\r\n            try {\r\n                const reponse = await tmdbApi.getMovieList(movieType.popular, { params })\r\n                setMovieItem(reponse.results.slice(0, 10))\r\n            }\r\n            catch {\r\n                console.log('Error')\r\n            }\r\n        }\r\n        getMovies()\r\n    }, [])\r\n\r\n    const setModalActive = async (item) => {\r\n\r\n        const modal = document.querySelector(`#modal__${item.id}`)\r\n        const videos = await tmdbApi.getVideos(category.movie, item.id)\r\n\r\n        if (videos.results.length > 0) {\r\n            const videoSrc = 'https://www.youtube.com/embed/' + videos.results[0].key\r\n            modal.querySelector('.modal__content > iframe').setAttribute('src', videoSrc)\r\n        }\r\n        else {\r\n            modal.querySelector('.modal__content').innerHTML = 'No trailer'\r\n        }\r\n\r\n        modal.classList.toggle('active')\r\n    }\r\n\r\n    const TrailerModal = props => {\r\n        const item = props.item\r\n\r\n        const iframRef = useRef(null)\r\n\r\n        const onClose = () => iframRef.current.setAttribute('src', '')\r\n\r\n        return (\r\n            <Modal active={false} id={`modal__${item.id}`}>\r\n                <ModalContent onClose={onClose}>\r\n                    <iframe ref={iframRef} width=\"100%\" height=\"400px\" title=\"Trailer\"></iframe>\r\n                </ModalContent>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='hero-slide'>\r\n            <Swiper\r\n                modules={[Autoplay]}\r\n                grabCursor={true}\r\n                spaceBetween={0}\r\n                slidesPerView={1}\r\n                autoplay={{ delay: 5000 }}\r\n                loop={true}\r\n                loopedSlides={10}\r\n            >\r\n                {\r\n                    movieItem.map((item, index) => (\r\n                        <SwiperSlide key={index}>\r\n                            <div className=\"hero-slide__item\" style={{ backgroundImage: `url(${apiConfig.originalImage(item.backdrop_path)})` }}>\r\n                                <div className=\"hero-slide__content\">\r\n                                    <h1 className=\"hero-slide__title\">{item.title}</h1>\r\n                                    <div className=\"hero-slide__overview text-clamp text-clamp--2\">{item.overview}</div>\r\n                                    <div className=\"hero-slide__btns\">\r\n                                        <Link to={`/movie/${item.id}`}>\r\n                                            <Button className=\"watch-now\">Watch</Button>\r\n                                        </Link>\r\n                                        <OutlineButton onClick={() => setModalActive(item)}>Trailer</OutlineButton>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </SwiperSlide>\r\n                    ))\r\n                }\r\n            </Swiper>\r\n            {\r\n                movieItem.map((item, index) => <TrailerModal key={index} item={item} />)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeroSlide\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport MovieCard from '../../Components/MovieCard'\r\n\r\nconst Favourite = props => {\r\n\r\n    const likes = useSelector(state => state.likes)\r\n\r\n    return (\r\n        <>\r\n            {\r\n                likes.length > 0 ? (\r\n                    <div className=\"movie-list\">\r\n                        <Swiper grabCursor={true} spaceBetween={10} slidesPerView={'auto'}>\r\n                            {likes.map((item, index) => (\r\n                                <SwiperSlide key={index}>\r\n                                    <MovieCard item={item} category={item.category} />\r\n                                </SwiperSlide>\r\n                            ))}\r\n                        </Swiper>\r\n                    </div>\r\n                )\r\n                    : (\r\n                        <div style={{ textAlign: \"center\", fontSize: \"25px\" }}>No Items</div>\r\n                    )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Favourite","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { category, movieType, tvType } from '../../API/tmdbApi'\r\nimport { OutlineButton } from '../../Components/Button'\r\nimport HeroSlide from '../../Components/HeroSlide'\r\nimport MovieList from '../../Components/MovieList'\r\nimport Favourite from '../Favourite'\r\n\r\nconst Home = () => {\r\n\r\n    return (\r\n        <>\r\n            <HeroSlide />\r\n            <div className=\"container\">\r\n                <div className=\"section mb-3\">\r\n                    <div className=\"section__header mb-2\">\r\n                        <h2>Trending Movies</h2>\r\n                        <Link to=\"/movie\">\r\n                            <OutlineButton className=\"small\">View More</OutlineButton>\r\n                        </Link>\r\n                    </div>\r\n                    <MovieList category={category.movie} type={movieType.popular} />\r\n                </div>\r\n                <div className=\"section mb-3\">\r\n                    <div className=\"section__header mb-2\">\r\n                        <h2>Top Rated Movies</h2>\r\n                        <Link to=\"/topmv\">\r\n                            <OutlineButton className=\"small\">View More</OutlineButton>\r\n                        </Link>\r\n                    </div>\r\n                    <MovieList category={category.movie} type={movieType.top_rated} />\r\n                </div>\r\n                <div className=\"section mb-3\">\r\n                    <div className=\"section__header mb-2\">\r\n                        <h2>Upcoming Movies</h2>\r\n                        <Link to=\"/upcomingmv\">\r\n                            <OutlineButton className=\"small\">View More</OutlineButton>\r\n                        </Link>\r\n                    </div>\r\n                    <MovieList category={category.movie} type={movieType.upcoming} />\r\n                </div>\r\n                <div className=\"section mb-3\">\r\n                    <div className=\"section__header mb-2\">\r\n                        <h2>Trending TVs</h2>\r\n                        <Link to=\"/tv\">\r\n                            <OutlineButton className=\"small\">View More</OutlineButton>\r\n                        </Link>\r\n                    </div>\r\n                    <MovieList category={category.tv} type={tvType.popular} />\r\n                </div>\r\n                <div className=\"section mb-3\">\r\n                    <div className=\"section__header mb-2\">\r\n                        <h2>Top Rated TVs</h2>\r\n                        <Link to=\"/toptv\">\r\n                            <OutlineButton className=\"small\">View More</OutlineButton>\r\n                        </Link>\r\n                    </div>\r\n                    <MovieList category={category.tv} type={tvType.top_rated} />\r\n                </div>\r\n                <div className=\"section mb-3\">\r\n                    <div className=\"section__header mb-2\">\r\n                        <h2>On The Air</h2>\r\n                        <Link to=\"/on_the_air\">\r\n                            <OutlineButton className=\"small\">View More</OutlineButton>\r\n                        </Link>\r\n                    </div>\r\n                    <MovieList category={category.tv} type={tvType.on_the_air} />\r\n                </div>\r\n                <div className=\"section mb-3\">\r\n                    <div className=\"section__header mb-2\">\r\n                        <h2>Favourite</h2>\r\n                        <Link to=\"/favourite\">\r\n                            <OutlineButton className=\"small\">View More</OutlineButton>\r\n                        </Link>\r\n                    </div>\r\n                    <Favourite />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from \"react\";\r\n\r\nimport { Routes as Switch, Route } from \"react-router-dom\";\r\nimport Catalog from \"../Pages/Catalog\";\r\nimport Detail from \"../Pages/Detail\";\r\nimport Home from \"../Pages/Home\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path='/' element={<Home />} />\r\n            <Route path='/:category/' element={<Catalog />} />\r\n            <Route path='/:category/genre' element={<Catalog />} />\r\n            <Route path='/:category/search/:keywork' element={<Catalog />} />\r\n            <Route path='/:category/:id' element={<Detail />} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n"],"names":["baseUrl","apiKey","originalImage","imgPath","w500Image","axiosClient","axios","baseURL","apiConfig","headers","paramsSerializer","params","querystring","api_key","interceptors","request","use","config","response","data","error","movieType","upcoming","popular","top_rated","tvType","on_the_air","category","movie","movie_top_rated","tv","tv_top_rated","getMovieList","type","url","getTvList","getVideos","cate","id","getCredits","details","search","genre","getByGenre","credits","similar","Genres","props","navigate","useNavigate","onSetGenre","listGenre","useState","genres","setGenres","useEffect","getGenre","reponse","tmdbApi","className","map","g","i","includes","onClick","name","defaultProps","OutlineButton","children","placeholder","value","onChange","e","item","link","bg","poster_path","backdrop_path","to","style","backgroundImage","PageSearch","keywork","setKeywork","gotoSearch","useCallback","trim","length","enterEvent","preventDefault","keyCode","document","addEventListener","removeEventListener","target","likes","useSelector","state","items","setItems","page","setPage","totalPage","setTotalPage","useParams","getList","undefined","query","with_genres","join","console","log","results","total_pages","loadMore","querySelector","classList","remove","add","nextSibling","toggle","index","findIndex","newListGenres","push","splice","textAlign","fontSize","fontWeight","stringHeader","setItem","grabCursor","spaceBetween","slidesPerView","ModalContent","contentRef","useRef","ref","current","parentNode","onClose","active","setActive","casts","setCasts","getCasts","cast","slice","c","profile_path","videos","setVideos","video","setVideo","getVideo","res","Video","iframeRef","height","offsetWidth","setAttribute","src","key","width","title","allowFullScreen","v","count","display","border","alignItems","justifyContent","toast","getDetail","window","scrollTo","TrailerModal","iframRef","setActiveModal","modal","videoSrc","innerHTML","dispatch","useDispatch","vote_average","edit","size","find","x","action","removeLike","addLike","onLike","heightVid","clientHeight","scroll","top","behavior","overview","SwiperCore","Autoplay","movieItem","setMovieItem","getMovies","setModalActive","modules","autoplay","delay","loop","loopedSlides","path","element"],"sourceRoot":""}